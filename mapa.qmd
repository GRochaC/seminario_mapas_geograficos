---
title: "Mapas"
format: 
  revealjs:
    embed-resources: true
editor: visual
---

## Sumário {auto-animate="true"}

::: incremental
-   Dados espaciais

-   Leaflet

-   Googleways
:::

```{r}
#| echo: true
#| message: false
#| warning: false
#| error: false
#| include: false
#| cache: true

#Pacotes
if (!require("pacman")) install.packages("pacman")
pacman::p_load("sf", "tidyverse","ggplot2", "ggplot","dplyr", "plotly", "readr", "geobr", "googleway", "ggmap","leaflet","geojsonio", "jsonlite","colorRamps","grDevices","tibble")

key = "AIzaSyC78zbXYMb-7nD8R-YiGruRRXicfsdhqiY"
#tava dando erro sem??
library(ggplot2)
library(geobr)
```

## Dados espaciais: {auto-animate="true"}

::: incremental
-   Pacotes
-   GEOBR
-   Shapefile
-   geoJSON
:::

## Dados espaciais: {auto-animate="true"}

::: nonincremental
-   Pacotes
-   **GEOBR**
-   Shapefile
-   geoJSON
:::

##  {auto-animate="true"}

::: {style="margin-top: 100px;"}
Geobr
:::

##  {auto-animate="true"}

::: {style="margin-top: 200px; font-size: 3em; color: #feb845;"}
Geobr
:::

## Geobr

::: {style="text-align: left;"}
É um pacote para download de conjuntos de [<strong>dados espaciais oficiais do Brasil</strong>]{style="color: #feb845;"}. O pacote inclui uma ampla gama de dados geoespaciais em formato de geopacote (como [<strong>shapefiles</strong>]{style="color: #feb845;"}).
:::


## Exemplo

```{r}
#| echo: true
#| results: hide

# Ler município específico em um determinado ano
mun <- geobr::read_municipality(code_muni = 5300108, year = 2017)
# 5300108 = Brasília
# Ler todos os municípios de um estado específico em um determinado ano
mun <- geobr::read_municipality(code_muni = 33, year = 2010) # ou
mun <- geobr::read_municipality(code_muni = "RJ", year = 2010)

# Ler todos os municípios do país em um determinado ano
mun <- geobr::read_municipality(code_muni = "all", year = 2018)
```

[IBGE](https://www.ibge.gov.br/explica/codigos-dos-municipios.php)

## Funções {background-color="#feb845"}

![](geobr/teste4.png)

## Exemplos

::: panel-tabset
### Codigo

Estados Brasileiros

```{r}
#| echo: true
library(ggplot2)
library(geobr)
estados <- geobr::read_state(
  year = 2019, 
  showProgress = FALSE
)

# Plotar todos os estados brasileiros
g1 <- ggplot() +
  geom_sf(data=estados, fill="#2D3E50", color="#FEBF57", size=.15, show.legend = FALSE) +
  labs(subtitle="Estados", size=8) +
  theme_minimal() 

```

### Estados

```{r}
g1
```

```{r}
#| echo: false
library(ggplot2)
library(geobr)
# Baixar todos os municípios do Rio
all_muni <- geobr::read_municipality(
  code_muni = "RJ", 
  year= 2010,
  showProgress = FALSE
)

# Gráfico
g2 <- ggplot() +
  geom_sf(data=all_muni, fill="#2D3E50", color="#FEBF57", size=.15, show.legend = FALSE) +
  labs(subtitle="Municípios do Rio de Janeiro, 2000", size=8) +
  theme_minimal() 


```

### Municípios

```{r}
g2
```
:::

## Dados espaciais: {auto-animate="true"}

::: nonincremental
-   Pacotes
-   GEOBR
-   **Shapefile**
-   geoJSON
:::

##  {auto-animate="true"}

::: {style="margin-top: 200px; font-size: 3em; color: blue;"}
Shapefile
:::

::: {style="text-align: right; margin-top: -350px;"}
<img src="shapefile/animation.gif" style="width:500px;height:auto;"/>
:::

## O que é um Shapefile?

-   Formato popular para dados geoespaciais.
-   Armazena informações geométricas e atributos em múltiplos arquivos.
-   Normalmente composto por três arquivos principais: `.shp`, `.shx`, `.dbf`.

### Como encontrar?

-   Sites de instituições geográficas/governo
-   Sites de banco de dados
-   Natural Earth (rnaturalearth)

------------------------------------------------------------------------

## Aplicação no R

-   Pacotes: Simple Features (*sf*) e ggplot2
-   Geometria: geom_sf

### Funções principais

-   Ler dados espaciais: read_sf, st_read, etc
-   Operações geométricas: st_disjoint, st_intersects, etc
-   Visualização: geom_sf

[Cheat Sheet](https://github.com/rstudio/cheatsheets/blob/main/sf.pdf)

# Aplicação

## Banco de dados

-   Natural Earth
-   https://www.naturalearthdata.com/downloads/50m-cultural-vectors/
-   Contém várias informações referente aos países do mundo, incluindo a geometria.

## Lendo o banco de dados

```{r}
#| echo: true
#| cache: true

my_sf<- read_sf("shapefile/ne_50m_admin_0_countries/ne_50m_admin_0_countries.shp")

my_sf %>%
  select(SOVEREIGNT, POSTAL, CONTINENT, NAME_PT, ISO_A3,geometry) %>%
  head()
```

------------------------------------------------------------------------

```{r}
#| echo: true
#| cache: true

ggplot(my_sf) +
  geom_sf(fill = "#69b3a2", color = "white")+
  theme_minimal() 
```

------------------------------------------------------------------------

```{r}
#| echo: true
#| cache: true
library(rnaturalearth)
my_sf |>
  filter(CONTINENT == "South America") |>
  ggplot() +
  geom_sf(fill = "lightblue", color = "black") +
  geom_sf_text(aes(label = NAME_PT), size = 2)+
  theme_minimal()

```

------------------------------------------------------------------------

::: panel-tabset
### Código

```{r}
#| echo: true
#| cache: true

poluicao<- read_csv("shapefile/GCB2022v27_MtCO2_flat.csv") |>
  filter(Year > 2000) 

mapa_poluicao <- left_join(my_sf |>
                             select(ISO_A3, NAME_PT, geometry),
                           poluicao, by = c("ISO_A3" = "ISO 3166-1 alpha-3"))


mapa<- ggplot(data = mapa_poluicao) +
  geom_sf(aes(fill = Total)) +  
  scale_fill_viridis_c(option = "turbo") +  
  labs(title = "Quantidade de Poluição por País") +
  theme_minimal()

```

### Mapa

```{r}
mapa
```
:::

## Referências

-   https://ipeagit.github.io/geobr/#r-reading-the-data-as-an-sf-object

##  {auto-animate="true"}

::: {style="margin-top: 100px;"}
Leaflet
:::

##  {auto-animate="true"}

::: {style="margin-top: 200px; font-size: 3em; color: #949494;"}
**Leaflet**
:::

::: {style="text-align: right; margin-top: -350px;"}
![](leaflet/leaflet.png)
:::

## Leaflet

[<strong>Leaflet</strong>]{style="color: #949494;"} é uma das bibliotecas open source mais famosas para mapas iterativos.

## Características

-   Panorâmica e zoom iterativos.
-   Compor mapas com marcadores, polígonos, linhas, popups e dentro outros.
-   Incorporar mapas em documentos knitr/R Markdown/Quarto e aplicativos Shiny.
-   Renderizar facilmente objetos espaciais dos pacotes `sp` ou `sf`, ou data frames com colunas de latitude/longitude.

## Mapa Estático da UnB

```{r, echo = T}
library(leaflet)
# lê o arquivo geojson como um objeto espacial "sp"
dados = geojsonio::geojson_read("leaflet/pontos_unb.geojson", what = "sp")

# cria o mapa estático
mapa = leaflet(dados, options = leafletOptions(dragging = FALSE, 
                                               touchZoom = F, 
                                               doubleClickZoom = F, 
                                               zoomControl = F, 
                                               scrollWheelZoom = F)) %>%
  # adiciona os tiles do mapa 
  addTiles() %>%
  
  # adiciona os marcadores
  addMarkers(lng = dados@coords[,1], 
             lat = dados@coords[,2], 
             label = dados$nome,
             popup = dados$descricao)
```

## UnB

```{r}
mapa
```

## Mapa Estático do Brasil

```{r, echo = T}
if(!file.exists("leaflet/brasil.geojson")) {
  # cria o arquivo geojson a partir do arquivo json
  dados_brasil = st_read("leaflet/brazil_geo.json/brazil_geo.json") %>%
    st_write("leaflet/brasil.geojson", driver = "GEOJSON")
}

# lê o arquivo geojson como um objeto espacial "sp"
dados_brasil = geojsonio::geojson_read("leaflet/brasil.geojson", what = "sp")

# paleta de cores para cada estado
cores = colorFactor(terrain.colors(length(dados_brasil$id)), dados_brasil$id)

# cria o mapa estático
mapa_b = leaflet(dados_brasil, options = leafletOptions(dragging = FALSE, 
                                               touchZoom = F, 
                                               doubleClickZoom = F, 
                                               zoomControl = F, 
                                               scrollWheelZoom = F)) %>%
  
  # adiciona os tiles do mapa com imagens de satélite
  addTiles(urlTemplate = "https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}",
           options = tileOptions(
             attribution = 'Tiles © Esri — Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community'
           )) %>%
  
  # adiciona os polígonos
  addPolygons(stroke = F,
              fillOpacity = 1,
              fillColor = ~cores(dados_brasil$id),
              label = dados_brasil$id,
              popup = dados_brasil$name)

```

## Brasil

```{r}
mapa_b
```

## Mapa Interativo de Câmeras de Segurança

```{r, echo = T}
library(sf)
# lê o arquivo geojson como um objeto espacial "sp"
dados_cameras = geojsonio::geojson_read("leaflet/Cameras_de_Seguranca.geojson", what = "sp")

# converte as coordenadas UTM para latlog
coords = dados_cameras %>%
  as_tibble() %>%
  st_as_sf(coords = c("point_x","point_y"), 
           crs = "+proj=utm +zone=23 +south +datum=WGS84 +units=m +no_defs") %>%
  st_transform(crs = 4326) %>%
  st_coordinates()

# substitui as coordenadas UTM pelas coordenadas latlog
dados_cameras$point_x = coords[,"X"]
dados_cameras$point_y = coords[,"Y"]

# funcao que padroniza os popupinfo de cada camera
set_popup = function(popup) {
  popup = str_to_lower(popup) %>%
    str_trim()
  
  if(str_length(popup) == 0) return("N/A")
  
  if(str_detect(popup, "furtad") || str_detect(popup, "vandalizad")) return("Furtada/Vandalizada")
  else if(str_detect(popup, "não")) return("Não Instalada")
  
  return("Instalada")
}

# substitui para os popupinfo padronizado
dados_cameras$popupinfo = unlist(map(dados_cameras$popupinfo, set_popup))

# paleta de cores para cada estado da camera
pal = colorFactor(c("green", "orange", "red", "blue"), 
                  domain = c("Instalada", "Furtada/Vandalizada", "Não Instalada", "N/A"), ordered = T)

# cria o mapa
mapa_c = leaflet(dados_cameras) %>%
  
  # adiciona o tiles do mapa
  addTiles() %>%
  
  # define uma visão inicial
  setView(lng = -47.88281317652584, lat = -15.79409191690003, zoom = 12) %>%
  
  # adiciona os marcadores
  addCircleMarkers(lng = ~dados_cameras$point_x, 
                   lat = ~dados_cameras$point_y, 
                   label = ~dados_cameras$name, 
                   popup = ~dados_cameras$popupinfo, 
                   color = ~pal(dados_cameras$popupinfo),
                   radius = 6)
```

## Câmeras de Segurança

```{r}
mapa_c
```

## Mapa Interativo das Regiões Administrativas DF

```{r, echo = T}
if(!file.exists("leaflet/regioes_adm_df.geojson")) {
  # cria o arquivo geojson a partir do arquivo json
  dados_brasil = st_read("leaflet/regioes_adm_df.json") %>%
    st_write("leaflet/regioes_adm_df.geojson", driver = "GEOJSON")
}

# lê o arquivo geojson como um objeto espacial "sp"
dados_regioes = geojsonio::geojson_read("leaflet/regioes_adm_df.geojson", what = "sp")

# paleta de cores para cada região administrativa
cores = colorFactor("Paired", dados_regioes$id)

# cria o mapa
mapa_df = leaflet(dados_regioes) %>%
  
  # adiciona os tiles
  addTiles() %>%
  
  # adiciona os polígonos
  addPolygons(stroke = T,
              fillOpacity = 0.75,
              smoothFactor = 0.5,
              color = "black",
              weight = 1,
              opacity = 1,
              fillColor = ~cores(dados_regioes$id),
              label = dados_regioes$ra)
 
```

## Regiões Administrativas DF

```{r}
mapa_df
```

# [Googleway](https://symbolixau.github.io/googleway/articles/googleway-vignette.html)
